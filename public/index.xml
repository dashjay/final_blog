<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dashjay&#39;s</title>
    <link>/</link>
    <description>Recent content on Dashjay&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DES算法学习记录</title>
      <link>/blog/des/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/des/</guid>
      <description>一、加密算法的分类 1.对称加解密算法  通信双方同时掌握一个密钥，加密解密都是由一个密钥完成的（即加密密钥等于解密密钥，加解密密钥可以相互推倒出来）。
 双方通信前共同拟定一个密钥，不对第三方公开。
 不具有个体原子性，一个密钥被共享，泄漏几率增大
  2.公私钥加解密算法  通信双方掌握不同的密钥，不同方向的加解密由不同的密钥完成。  二、对称加密算法————DES加密  原理：该算法是一个利用56+8奇偶校验位（第8,16,24,32,40,48,56,64）=64位的密钥对以64位为单位的块数据进行加解密。
 假设明文如下： M（64位） = 0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
L（32位） = 0000 0001 0010 0011 0100 0101 0110 0111
R（32位） = 1000 1001 1010 1011 1100 1101 1110 1111
有秘钥如下 即K（64位） = 00010011 00110100 01010111 01111001 10011011 10111100 11011111 11110001
 加粗的为奇偶校验位，实际秘钥56位</description>
    </item>
    
    <item>
      <title>二进制玩出花来(表示和运算)</title>
      <link>/blog/bin/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/bin/</guid>
      <description>二进制运算（加减法） 要计算
$$A = (0.1011)_2 \ B = (-0.0101)_2 $$ 求 A+B(使用补码)
$$A_补 = 0.1011$$ ,$$B_补 = 1.1011$$
   加法 0.1011     + 1.1011   = 10.0110    其中结果 为 $$[A+B]_补$$ 并且要把符号位的进位去除表示为
$$[A+B]_补 = 0.0110 = A_补 + B_补$$
其中$$(0.0110)_补 = 0.0110$$
答案出来了
 练习1
 $$ A=\frac{9}{16}，B=\frac{11}{16}$$
用补码求A+B
$$ A = (0.5625)_{10} = (0.1001)_2 $$
$$ B = (0.6875)_{10} = (0.</description>
    </item>
    
    <item>
      <title>一个项目的梳理Verilog_OJ</title>
      <link>/blog/verilog-oj/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/verilog-oj/</guid>
      <description>1. 项目诞生 (2018 12 13) 何老师发了几个链接，然后我们就开始设计这个网站了
https://opencores.org/howto/eda https://www.edaplayground.com/x/B http://www.techep.csi.cuny.edu/~zhangs/v.html https://github.com/timyang2010/VerilogOnlineJudge  第一周的计划让我们激动 雪松学长的加入 开会的时候鲁一洋做的记录 需求文档0.2哦 需求文档下载链接 1-10开会整理 1-10开会整理 3-22我们创建并且使用了Teambition
遇到了多伦多大学网站
国防科技大学网站
&amp;hellip;我没有每天写日记的习惯，这次项目让我成长了不少，但是也让我感受到了心有余而力不足的感觉,项目开发和版本迭代并没有想象中的那么容易，那么干净利落，要准备的东西太多了。
 我现在开始整理并且把制作这个项目的过程做成册来记录我的成长过程
 1.项目初期开发使用PHP_Laravel一个简单干净的框架，当初为了把Vue嵌入进Laravel也花了不少时间那还是第一个版本（现在代码都不知道放在哪里了，非常难受）
2.项目第二版本是当我准备去参加计算机设计大赛的时候，重新对整个项目重构，还是使用了PHP_Laravel + vue来实现，数据库我都没换，但是我换了一个前端框架，之前使用的Element-UI被我换成了额Iview，我自己感觉重构了一个版本，但是其实并没有实质内容的变化，只不过后台调用了Verilog而已。
3.第三个版本是为了市赛准备的版本，数据库换成了额MongoDB，纯Docker化部署，PHP为核心，代码已经非常成熟了，然后使用Flask(python)给后台提供了便捷的评测API,只要文件储存的路径对了就可以了。
4.第四个版本是未来的版本，推测这个项目只会有五个版本，那么作为第倒数第二个版本，基础逻辑（除了评测之外的逻辑）使用PHP开发，数据库使用MongoDB，然后在评测部分使用FLask来编程，整个项目Docker化部署。以上说的是OJ这边，除此之外，在线模板开发的这个项目可以搞起来。
 根据老师的设想 案例：电梯： 状态机 -&amp;gt; 代码编写 -&amp;gt; 在线板级验证
 总共网站要集成这几个功能，第一个是画状态机。 第二个是代码编写： 第三个上板验证还是一块蓝图： 5.版本不设计，只对代码进行逻辑的链接，（设想）。</description>
    </item>
    
    <item>
      <title>Laravel使用MongoDB纯Docker化部署</title>
      <link>/blog/laravel-mongodb-docker/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/laravel-mongodb-docker/</guid>
      <description>使用场景：学校，OJ，使用的本不会太懂，尽量傻瓜式部署。
 在PHP下使用Laravel必须安装MongoDB插件，然后MongoDB-Server必须运行，这次为了方便软件使用，我使用了纯Docker部署，也是为了方便拓展。  首先拉到一个非常好的Docker，已经配置的非常好了~可以直接使用那种！&amp;ndash;&amp;gt;webdevops/php-nginx
$docker pull webdevops/php-nginx $docker run -d -p 32778:80 -p 32777:443 -p 32776:9000 webdevops/php-nginx supervisord  不出意外此时你访问localhost:32778的时候可以看到nginx404了，那是因为网页没有index 这时候你运行docker ps -a 检查一下刚才运行的docker的名字
$docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a969d60ac6ea webdevops/php-nginx &amp;quot;/entrypoint supervi…&amp;quot; 8 minutes ago Up 8 minutes 0.0.0.0:32778-&amp;gt;80/tcp, 0.0.0.0:32777-&amp;gt;443/tcp, 0.0.0.0:32776-&amp;gt;9000/tcp fervent_hofstadter  其中docker的id是这个a969d60ac6ea
然后使用docker exec来执行命令进入docker
docker exec -it a969d60ac6ea bash  我们既不会影响原来的程序supervisord的运行，还能进入现有docker
$ls 1 bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var  查看一下有哪些目录，整个目录是映射在app里的，所以我们进入app</description>
    </item>
    
    <item>
      <title>6个树莓派实现的负载均衡</title>
      <link>/blog/6/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/6/</guid>
      <description>最近太忙了，之后再记录到底发生了什么吧，其实挺有意思的。
 树莓派2b+ * 6(详细参数在下方)
    部件 芯片     CPU主芯 BCM2835 （ARM11）   内存 512MB SDRAM @ 400MHz   GPU Broadcom VideoCore IV   网口 10/100Mbps    </description>
    </item>
    
    <item>
      <title>Fancy App 1</title>
      <link>/itemized/item1/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/itemized/item1/</guid>
      <description> App 1 </description>
    </item>
    
    <item>
      <title>Fancy App 2</title>
      <link>/itemized/item2/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/itemized/item2/</guid>
      <description> App 2 </description>
    </item>
    
    <item>
      <title>Fancy App 3</title>
      <link>/itemized/item3/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/itemized/item3/</guid>
      <description> App 3 </description>
    </item>
    
    <item>
      <title>Fancy App 4</title>
      <link>/itemized/item4/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/itemized/item4/</guid>
      <description> App 4 </description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/blog/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/blog/2015-07-23-r-rmarkdown/</guid>
      <description>R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/blog/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/blog/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/blog/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/hugoisforlovers/</guid>
      <description>&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo releases&lt;/a&gt; and download the
appropriate version for your os and architecture.&lt;/p&gt;

&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;

&lt;p&gt;More complete instructions are available at &lt;a href=&#34;/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>/blog/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/migrate-from-jekyll/</guid>
      <description>&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>